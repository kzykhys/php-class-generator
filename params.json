{"name":"PHP Class Generator","tagline":"Generate PSR compliant classes from plain text document","body":"PHP Class Generator [![Build Status](https://travis-ci.org/kzykhys/php-class-generator.png)](https://travis-ci.org/kzykhys/php-class-generator)\r\n===================\r\n\r\nGenerate PSR compliant classes from plain text document\r\n\r\nRequirements\r\n------------\r\n\r\n* PHP 5.3.3 +\r\n\r\nInstallation\r\n------------\r\n\r\n### Download phar\r\n\r\n[Download php-cg.phar](https://github.com/downloads/kzykhys/php-class-generator/php-cg.phar) and store anywhere.\r\n\r\n### via Composer\r\n\r\n```\r\n{\r\n    \"require\": {\r\n        \"kzykhys/php-class-generator\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nUsage\r\n-----\r\n\r\nWrite your class and save the text file to *.pcg (Syntax is described below)\r\nFor example ``./doc/myclass.pcg``\r\n\r\n```\r\nKzykHys\\ClassGenerator\\Sample < KzykHys\\ClassGenerator\\Container << \\IteratorAggrigate \\Countable\r\n> The sample of PHP Class Generator\r\n> Generates PHP classes from plain text document (*.pcg)\r\n+ iterator:\\ArrayIterator\r\n# container:array\r\n# length:integer[get set] > The length of code\r\n# compiled:boolean[is set] > Whether this class is compiled or not\r\n- options:array\r\n- generator:Generator[get set]\r\n+ __construct(options:array)\r\n+ generate(document:string version:string):\\KzykHys\\ClassGenerator\\Compiler\\StreamWriter\r\n+ getString():string > Returns the code as a string\r\n+ write(filename:string) > Write the code to file\r\n+ count():integer\r\n# traverseContainer():Container\r\n```\r\n\r\nRun the command\r\n\r\n```\r\n$ php php-pcg.phar --from ./doc --to ./src\r\n```\r\n\r\nPHP file will be generated to ``./src/Full/Qualified/ClassName.php``\r\n\r\n``` php\r\n<?php\r\n\r\nnamespace KzykHys\\ClassGenerator;\r\n\r\n/**\r\n * The sample of PHP Class Generator\r\n * Generates PHP classes from plain text document (*.pcg)\r\n */\r\nclass Sample extends Container implements \\IteratorAggrigate, \\Countable {\r\n\r\n    /**\r\n     * @var \\ArrayIterator $iterator\r\n     */\r\n    public $iterator;\r\n\r\n    /**\r\n     * @var array $container\r\n     */\r\n    protected $container;\r\n\r\n    /**\r\n     * The length of code\r\n     * \r\n     * @var integer $length\r\n     */\r\n    protected $length;\r\n\r\n    /**\r\n     * Whether this class is compiled or not\r\n     * \r\n     * @var boolean $compiled\r\n     */\r\n    protected $compiled;\r\n\r\n    /**\r\n     * @var array $options\r\n     */\r\n    private $options;\r\n\r\n    /**\r\n     * @var Generator $generator\r\n     */\r\n    private $generator;\r\n\r\n\r\n    /**\r\n     * @param array $options\r\n     */\r\n    public function __construct(array $options)\r\n    {\r\n        \r\n    }\r\n\r\n    /**\r\n     * @param string $document\r\n     * @param string $version\r\n     *\r\n     * @return \\KzykHys\\ClassGenerator\\Compiler\\StreamWriter\r\n     */\r\n    public function generate($document, $version)\r\n    {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Returns the code as a string\r\n     * \r\n     *\r\n     * @return string\r\n     */\r\n    public function getString()\r\n    {\r\n        \r\n    }\r\n\r\n    /**\r\n     * Write the code to file\r\n     * \r\n     * @param string $filename\r\n     */\r\n    public function write($filename)\r\n    {\r\n        \r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return integer\r\n     */\r\n    public function count()\r\n    {\r\n        \r\n    }\r\n\r\n    /**\r\n     *\r\n     * @return Container\r\n     */\r\n    protected function traverseContainer()\r\n    {\r\n        \r\n    }\r\n\r\n}\r\n```\r\n\r\nThe Syntax\r\n----------\r\n\r\n### Overview\r\n\r\n* Class Definition (required)\r\n* Field Definition (optionai)\r\n* Method Definition (optional)\r\n\r\n### Class Definition (required)\r\n\r\n```\r\n%ClassName% < %BaseClassName% << %InterfaceName% %InterfaceName% > %Comment%\r\n> %Comment%\r\n```\r\n\r\n* ``%ClassName%`` is required\r\n** If your class is in the namespace, ``%ClassName%`` will be like this ``\\\\Namespace\\\\Package\\\\ClassName``\r\n* ``<`` represents ``extends``\r\n* ``%BaseClassName%`` is optional\r\n* ``<<`` represents ``implements``\r\n* ``%InterfaceName%`` is optional\r\n* ``>`` starts comment to end of the line\r\n* You can place comments to same line and next line of class definition\r\n\r\n### Field Definition (optional)\r\n\r\n```\r\n%FieldVisibility% %FieldName% : %FieldType% \\[%FieldAccessor%\\] > %Comment%\r\n> %Comment%\r\n```\r\n\r\n* ``%FieldVisibility%`` is required\r\n* ``%FieldVisibility%`` takes ``+`` as public ``#`` as protected ``-`` as private\r\n* ``%FieldName%`` is required\r\n* ``%FieldType%`` is optional\r\n* ``%FieldAccessor%`` takes ``set``, ``bind`` as setter, ``get``, ``is`` as getter\r\n* ``>`` starts comment to end of the line\r\n* You can place comments to same line and next line of field definition\r\n\r\n### Method Definition (optionai)\r\n\r\n```\r\n%MethodVisibility% %MethodName% (%Argument% : %ArgumentType%) : %ReturnType%\r\n```\r\n\r\n* ``%MethodVisibility%`` is required\r\n* ``%MethodVisibility%`` takes ``+`` as public ``#`` as protected ``-`` as private\r\n* ``%MethodName%`` is required\r\n* Braces ``()`` are required (even if there is no argument)\r\n* ``%Argument%`` and ``%ArgumentType%`` is optional\r\n* ``%ReturnType%`` is optional\r\n\r\nWrite a Readable Document\r\n-------------------------\r\n\r\nYou can use any white spaces to write a readable document\r\n\r\nFollowing code is same as the code used in Usage\r\n\r\n```\r\nKzykHys\\ClassGenerator\\Sample < KzykHys\\ClassGenerator\\Container << \\IteratorAggrigate \\Countable\r\n    > The sample of PHP Class Generator\r\n    > Generates PHP classes from plain text document (*.pcg)\r\n\r\n+  iterator : \\ArrayIterator\r\n# container : array\r\n#    length : integer[get set]\r\n            > The length of code\r\n#  compiled : boolean[is set]\r\n            > Whether this class is compiled or not\r\n-   options : array\r\n- generator : Generator[get set]\r\n\r\n+   __construct(options:array)\r\n+    generate(document:string\r\n               version:string) : \\KzykHys\\ClassGenerator\\Compiler\\StreamWriter\r\n+                  getString() : string\r\n                               > Returns the code as a string\r\n+       write(filename:string)\r\n                               > Write the code to file\r\n+                      count() : integer\r\n#          traverseContainer() : Container\r\n```\r\n\r\nBuild Phar Archive\r\n------------------\r\n\r\nYou can build phar archive from source code by following command\r\n\r\n```\r\nphp-cg build\r\n```\r\n\r\nIf fails like this\r\n\r\n```\r\n  [UnexpectedValueException]\r\n  creating archive \"php-cg.phar\" disabled by the php.ini setting phar.readonly\r\n```\r\n\r\nRun following\r\n\r\n```\r\nphp -d phar.readonly=0 php-cg build\r\n```\r\n\r\n\r\nNotes\r\n-----\r\n\r\n* Class constant is not supported yet.\r\n* Implementation of interface is not generated automatically.\r\n\r\nAuthor\r\n------\r\nKazuyuki Hayashi (@kzykhys)\r\n","google":"UA-39381632-3","note":"Don't delete this file! It's used internally to help with page regeneration."}